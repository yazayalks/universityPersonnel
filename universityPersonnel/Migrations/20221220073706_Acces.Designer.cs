// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using universityPersonnel;

#nullable disable

namespace universityPersonnel.Migrations
{
    [DbContext(typeof(UniversityPersonnelDbContext))]
    [Migration("20221220073706_Acces")]
    partial class Acces
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("universityPersonnel.Models.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AcademicDegree");
                });

            modelBuilder.Entity("universityPersonnel.Models.AcademicTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AcademicTitle");
                });

            modelBuilder.Entity("universityPersonnel.Models.AccessRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Edit")
                        .HasColumnType("boolean");

                    b.Property<int?>("NameFormId")
                        .HasColumnType("integer");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Write")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NameFormId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessRight");
                });

            modelBuilder.Entity("universityPersonnel.Models.EmploymentBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReasonDismissal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("EmploymentBook");
                });

            modelBuilder.Entity("universityPersonnel.Models.Encouragement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EncouragementTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EncouragementTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("Encouragement");
                });

            modelBuilder.Entity("universityPersonnel.Models.EncouragementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EncouragementType");
                });

            modelBuilder.Entity("universityPersonnel.Models.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("universityPersonnel.Models.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Movement");
                });

            modelBuilder.Entity("universityPersonnel.Models.NameForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NameForm");
                });

            modelBuilder.Entity("universityPersonnel.Models.Penaltie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("PenaltieTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PenaltieTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("Penaltie");
                });

            modelBuilder.Entity("universityPersonnel.Models.PenaltieType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PenaltieType");
                });

            modelBuilder.Entity("universityPersonnel.Models.PreviousVenture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("PreviousVenture");
                });

            modelBuilder.Entity("universityPersonnel.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("universityPersonnel.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicDegreeId")
                        .HasColumnType("integer");

                    b.Property<int?>("AcademicTitleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateIssuePassport")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassportId")
                        .HasColumnType("integer");

                    b.Property<string>("PassportIssuedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SpecialityId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubdivisionId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("YearGraduation")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("AcademicTitleId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SubdivisionId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("universityPersonnel.Models.Subdivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subdivision");
                });

            modelBuilder.Entity("universityPersonnel.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("universityPersonnel.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("universityPersonnel.Models.AccessRight", b =>
                {
                    b.HasOne("universityPersonnel.Models.NameForm", "NameForm")
                        .WithMany("NameForms")
                        .HasForeignKey("NameFormId");

                    b.HasOne("universityPersonnel.Models.User", null)
                        .WithMany("AccessRights")
                        .HasForeignKey("UserId");

                    b.Navigation("NameForm");
                });

            modelBuilder.Entity("universityPersonnel.Models.EmploymentBook", b =>
                {
                    b.HasOne("universityPersonnel.Models.Staff", null)
                        .WithMany("EmploymentBooks")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("universityPersonnel.Models.Encouragement", b =>
                {
                    b.HasOne("universityPersonnel.Models.EncouragementType", "EncouragementType")
                        .WithMany("EncouragementTypes")
                        .HasForeignKey("EncouragementTypeId");

                    b.HasOne("universityPersonnel.Models.Staff", null)
                        .WithMany("Encouragements")
                        .HasForeignKey("StaffId");

                    b.Navigation("EncouragementType");
                });

            modelBuilder.Entity("universityPersonnel.Models.Movement", b =>
                {
                    b.HasOne("universityPersonnel.Models.Staff", null)
                        .WithMany("Movements")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("universityPersonnel.Models.Penaltie", b =>
                {
                    b.HasOne("universityPersonnel.Models.PenaltieType", "PenaltieType")
                        .WithMany("PenaltieTypes")
                        .HasForeignKey("PenaltieTypeId");

                    b.HasOne("universityPersonnel.Models.Staff", null)
                        .WithMany("Penalties")
                        .HasForeignKey("StaffId");

                    b.Navigation("PenaltieType");
                });

            modelBuilder.Entity("universityPersonnel.Models.PreviousVenture", b =>
                {
                    b.HasOne("universityPersonnel.Models.Staff", null)
                        .WithMany("PreviousVentures")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("universityPersonnel.Models.Staff", b =>
                {
                    b.HasOne("universityPersonnel.Models.AcademicDegree", "AcademicDegree")
                        .WithMany("AcademicDegrees")
                        .HasForeignKey("AcademicDegreeId");

                    b.HasOne("universityPersonnel.Models.AcademicTitle", "AcademicTitle")
                        .WithMany("AcademicTitles")
                        .HasForeignKey("AcademicTitleId");

                    b.HasOne("universityPersonnel.Models.JobTitle", "JobTitle")
                        .WithMany("JobTitles")
                        .HasForeignKey("JobTitleId");

                    b.HasOne("universityPersonnel.Models.Speciality", "Speciality")
                        .WithMany("Specialties")
                        .HasForeignKey("SpecialityId");

                    b.HasOne("universityPersonnel.Models.Subdivision", "Subdivision")
                        .WithMany("Subdivisions")
                        .HasForeignKey("SubdivisionId");

                    b.Navigation("AcademicDegree");

                    b.Navigation("AcademicTitle");

                    b.Navigation("JobTitle");

                    b.Navigation("Speciality");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("universityPersonnel.Models.User", b =>
                {
                    b.HasOne("universityPersonnel.Models.UserType", "UserType")
                        .WithMany("UserTypes")
                        .HasForeignKey("UserTypeId");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("universityPersonnel.Models.AcademicDegree", b =>
                {
                    b.Navigation("AcademicDegrees");
                });

            modelBuilder.Entity("universityPersonnel.Models.AcademicTitle", b =>
                {
                    b.Navigation("AcademicTitles");
                });

            modelBuilder.Entity("universityPersonnel.Models.EncouragementType", b =>
                {
                    b.Navigation("EncouragementTypes");
                });

            modelBuilder.Entity("universityPersonnel.Models.JobTitle", b =>
                {
                    b.Navigation("JobTitles");
                });

            modelBuilder.Entity("universityPersonnel.Models.NameForm", b =>
                {
                    b.Navigation("NameForms");
                });

            modelBuilder.Entity("universityPersonnel.Models.PenaltieType", b =>
                {
                    b.Navigation("PenaltieTypes");
                });

            modelBuilder.Entity("universityPersonnel.Models.Speciality", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("universityPersonnel.Models.Staff", b =>
                {
                    b.Navigation("EmploymentBooks");

                    b.Navigation("Encouragements");

                    b.Navigation("Movements");

                    b.Navigation("Penalties");

                    b.Navigation("PreviousVentures");
                });

            modelBuilder.Entity("universityPersonnel.Models.Subdivision", b =>
                {
                    b.Navigation("Subdivisions");
                });

            modelBuilder.Entity("universityPersonnel.Models.User", b =>
                {
                    b.Navigation("AccessRights");
                });

            modelBuilder.Entity("universityPersonnel.Models.UserType", b =>
                {
                    b.Navigation("UserTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
